 class Node implements Comparator<Node>
    {
        private int v;
        private int weight;

        Node(int _v, int _w) { v = _v; weight = _w; }

        Node() {}

        int getV() { return v; }
        int getWeight() { return weight; }

        @Override
        public int compare(Node node1, Node node2)
        {
            if (node1.weight < node2.weight)
                return -1;
            if (node1.weight > node2.weight)
                return 1;
            return 0;
        }
    }


 public int[] shortestPath(int s, List<List<Node>> adj, int N , int[] d)
        {
            int dist[] = new int[N];

            for(int i = 0;i<N;i++) dist[i] = Integer.MAX_VALUE;
            dist[s] = 0;

            PriorityQueue<Node> pq = new PriorityQueue<Node>(N, new Node());
            pq.add(new Node(s, 0));

            while(pq.size() > 0) {
                Node node = pq.poll();
              if(dist[node.getV()]<node.getWeight())
              continue;
                for(Node it: adj.get(node.getV())) {
                    if(dist[node.getV()] + it.getWeight() < dist[it.getV()] && dist[node.getV()] + it.getWeight() < d[it.getV()]) {
                        dist[it.getV()] = dist[node.getV()] + it.getWeight();
                        pq.add(new Node(it.getV(), dist[it.getV()]));
                    }
                }
            }
            int[] res = new int[N];
            for (int i = 0; i < N; i++)
            {
                if(dist[i]<d[i])
                {
                    res[i] = dist[i];
                }
                else {
                    res[i]=-1;
                }

            }
            return res;
        }
